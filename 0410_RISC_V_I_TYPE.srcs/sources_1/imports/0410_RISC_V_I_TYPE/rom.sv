`timescale 1ns / 1ps

module rom (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:15];

    initial begin
        //rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _opcode; // R-Type
        rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1
        rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1
        //rom[x]= 32'b imm12      _ rs1 _f3 _ rd  _ opcode; // I-Type  rs1, rd, imm
        rom[2]  = 32'b000000001000_00010_000_00011_0010011;  // ADDI    x6, x3, 8;
        rom[3]  = 32'b000000001000_00010_010_00100_0010011;  // SLTI    x6, x4, 8;
        rom[4]  = 32'b000000001000_00010_011_00101_0010011;  // SLTIU   x6, x5, 8;
        rom[5]  = 32'b000000001000_00010_100_00110_0010011;  // XORI    x6, x6, 8;
        rom[6]  = 32'b000000001000_00010_110_00111_0010011;  // ORI     x6, x7, 8;
        rom[7]  = 32'b000000001000_00010_111_01000_0010011;  // ANDI    x6, x8, 8;
        rom[8]  = 32'b000000001000_00010_001_01001_0010011;  // SLLI    x6, x9, 8;
        rom[9]  = 32'b000000001000_00010_101_01010_0010011;  // SRLI    x6, x10, 8;
        rom[10] = 32'b000000001000_00010_101_01011_0010011; // SRAI     x6, x11, 8;

        //rom[x]=32'b imm7  _ rs2 _ rs1 _f3 _ imm5_ opcode; // S-Type
        //rom[2] = 32'b0000000_00010_00000_010_01000_0100011; // sw x2, 8(x0);
        //rom[x]=32'b imm12      _ rs1 _f3 _ rd  _ opcode; // L-Type
        //rom[3] = 32'b000000001000_00000_010_00011_0000011; // lw x3, 8(x0);
    end
    assign data = rom[addr[31:2]];
endmodule
