`timescale 1ns / 1ps

module rom (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:15];

    initial begin
        //rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _opcode;   // R-Type rd  rs1 rs2
        rom[0]  = 32'b0000000_00001_00010_000_00100_0110011;  // add  x4,  x2, x1
        rom[1]  = 32'b0100000_00001_00010_000_00101_0110011;  // sub  x5,  x2, x1
        rom[2]  = 32'b0000000_00011_00010_001_00110_0110011;  // sll  x6,  x2, x3
        rom[3]  = 32'b0000000_00011_00010_101_00111_0110011;  // srl  x7,  x2, x3
        rom[4]  = 32'b0100000_00001_00010_101_01000_0110011;  // sra  x8,  x2, x1
        rom[5]  = 32'b0000000_00001_00010_010_01001_0110011;  // slt  x9,  x2, x1
        rom[6]  = 32'b0000000_00001_00100_010_01010_0110011;  // slt  x10, x3, x1
        rom[7]  = 32'b0000000_00001_00010_011_01011_0110011;  // sltu x11, x2, x1
        rom[8]  = 32'b0000000_00001_00010_100_01100_0110011;  // xor  x12, x2, x1
        rom[9]  = 32'b0000000_00001_00010_110_01101_0110011;  // or   x13, x2, x1
        rom[10] = 32'b0000000_00001_00010_111_01110_0110011;  // and  x14, x2, x1
    end

    assign data = rom[addr[31:2]]; //주소 계산을 쉽게 하기 위해서 4로 나누진 값으로 작성
    // 0,1 번 지움;  4의 배수로 하기 위해서 하위 2비트를 무시한 것;
    // 하위 2비트를 지우면 4로 나눴을 때의 값과 같이 나옴옴
endmodule

//    //rom[x]= 32'b func7 _ rs2 _ rs1 _ f3 _ rd _ opcode; //R_Type
//     rom[0] = 32'b0000000_00010_00001_000_00100_0110011; // add x4 , x2, x1
//     rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5 , x0, x1
//     rom[2] = 32'b0000000_00010_00001_001_00110_0110011; // sll x6 , x2, x1
//     rom[3] = 32'b0000000_00010_00001_101_00111_0110011; // srl x7 , x2, x1
//     rom[4] = 32'b0100000_00010_00001_101_01000_0110011; // sra x8 , x2, x1
//     rom[5] = 32'b0000000_00010_00001_010_01001_0110011; // slt x9 , x2, x1
//     rom[6] = 32'b0000000_00010_00001_011_01010_0110011; // sltu x10 , x2, x1
//     rom[7] = 32'b0000000_00010_00001_100_01011_0110011; // xor x11 , x2, x1
//     rom[8] = 32'b0000000_00010_00001_110_01100_0110011; // or x12 , x2, x1
//     rom[9] = 32'b0000000_00010_00001_111_01101_0110011; // and x13 , x2, x1
