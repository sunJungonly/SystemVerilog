`timescale 1ns / 1ps

module rom (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:15];

    initial begin
        //rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _ opcode; // R-Type
        // rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1
        // rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1
        //rom[x]=32'b imm7  _ rs2 _ rs1 _f3 _ imm5 _ opcode; // S-Type
        // imm7_imm5 하나로 이어짐 ex) 0000000__00001 => decimal 1
        // imm7_imm5 = 1과 x2즉 레지스터 r2에 저장된 값 12를 더한 것이 M[13]
        // M[13]은 RAM의 13자리 즉 addr를 말함
        // 그 위치에 x4즉 레지스터 r4에 저장된데이터 값이 저장된다는 의미미
        // rom[13] = 32'b0000000_00100_00000_000_00001_0100011; // sb x4, 1(x0); 
        // rom[14] = 32'b0000000_00011_00001_001_00010_0100011; // sh x3, 2(x1); 
        // rom[2] = 32'b0000000_00010_00000_010_01000_0100011; // sw x2, 8(x0); 
        // //rom[2] = 32'b0000000_00010_00000_010_01000_0100011; // sw x2, 8(x0); 
        // //rom[x]=32'b imm12      _ rs1 _ f3_ rd  _ opcode; // L-Type
        // rom[3] = 32'b000000001000_00000_010_00011_0000011; // lw x3, 8(x0); 
        // //rom[x]=32'b imm12(데이터)    _ rs1(주소)_ f3_ rd(주소)  _ opcode; // I-Type 
        // rom[4] = 32'b000000001000_00001_000_00100_0010011; // lw x3, 8(x1); 
        // rom[5] = 32'b000000001000_00001_010_00101_0010011; // lw x4, 8(x1); 
        // rom[6] = 32'b000000001000_00001_011_00110_0010011; // lw x5, 8(x1); 
        // rom[7] = 32'b000000001000_00001_100_00111_0010011; // lw x6, 8(x1); 
        // rom[8] = 32'b000000001000_00001_110_01000_0010011; // lw x7, 8(x1);  
        // rom[9] = 32'b000000001000_00001_111_01001_0010011; // lw x8, 8(x1);  
        // //rom[x]=32'b imm7 imm5 _ rs1 _ f3_ rd  _ opcode; // I-Type 
        // rom[10] = 32'b0000000_0010_00001_001_01010_0010011; // lw x3, 8(x0); 
        // rom[11] = 32'b0000000_0010_00001_101_01011_0010011; // lw x3, 8(x0); 
        // rom[12] = 32'b0100000_0010_00001_101_01100_0010011; // lw x3, 8(x0); 

        //rom[0] = 32'b0000000_00100_00000_000_00001_0100011; // sb x4, 1(x0);
        //rom[0] = 32'b0000000_00100_00000_001_00001_0100011; // sh x4, 1(x0);
        //rom[0] = 32'b0000000_00100_00000_010_00001_0100011; // sw x4, 1(x0);
        
        //rom[0] = 32'b000000010100_00000_001_00100_0000011; // lh x3, 8(x0); 
        rom[0] = 32'b000000010100_00000_101_00100_0000011; // lh x3, 8(x0); 
        // rom[4] = 32'b000000000001_00010_001_00101_0000011; // lh x3, 8(x0); 
        // rom[5] = 32'b000000000001_00010_010_00110_0000011; // lh x3, 8(x0); 

    end
    assign data = rom[addr[31:2]];
endmodule
